import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# ---------- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ----------
RESULT_CSV1 = "nyt_2024_news_sentiment_deberta-v3-small_turbo.csv"
all_news_df = pd.read_csv(RESULT_CSV1, parse_dates=['published_date'])

# –ü—Ä–æ–≤–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ 'sentiment'
print("–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ 'sentiment':", all_news_df['sentiment'].unique())

# ---------- 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ----------
RESULT_CSV2 = "financial_data.csv"

def read_financial_data_with_multiindex(csv_path):
    df = pd.read_csv(csv_path)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–ª–æ–Ω–∫—É Date –æ—Ç–¥–µ–ª—å–Ω–æ
    date_column = df['Date']

    # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª–∏–º –µ—ë –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    df_rest = df.drop(columns=['Date'])

    # –†–∞—Å—â–µ–ø–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ '.'
    new_columns = df_rest.columns.str.split('.', expand=True)
    df_rest.columns = pd.MultiIndex.from_tuples(new_columns)

    # –í–µ—Ä–Ω–µ–º Date –æ–±—Ä–∞—Ç–Ω–æ
    df_rest['Date'] = pd.to_datetime(date_column)
    df_rest = df_rest.set_index('Date')
    
    return df_rest

# –ß—Ç–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
financial_data = read_financial_data_with_multiindex(RESULT_CSV2)

# ---------- 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------
# –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
daily_sentiment = all_news_df.groupby(['published_date', 'sentiment']).size().unstack(fill_value=0).reset_index()

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
daily_sentiment['published_date'] = pd.to_datetime(daily_sentiment['published_date'])

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è 'positive', 'negative' –∏ 'neutral'
print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:", daily_sentiment.head())

# ---------- 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è ----------
open_data = financial_data.xs('Open', axis=1, level=1)
open_data.index = pd.to_datetime(open_data.index)
open_data = open_data.reset_index()

# ---------- 5. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ ----------
merged_data = pd.merge(daily_sentiment, open_data, left_on='published_date', right_on='Date', how='inner')

# –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
merged_data = merged_data.drop(columns=['Date'])

# ---------- 6. –°–¥–≤–∏–≥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ 1 –∏ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥ ----------
# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Å—Ç–æ–ª–±—Ü—ã 'positive', 'negative' –∏ 'neutral', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∑–∞–º–µ–Ω–∏–º –Ω–∞ 0
if 'positive' not in merged_data.columns:
    merged_data['positive'] = 0
if 'negative' not in merged_data.columns:
    merged_data['negative'] = 0
if 'neutral' not in merged_data.columns:
    merged_data['neutral'] = 0

# –°–¥–≤–∏–≥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ 1 –∏ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥
merged_data['positive_lag1'] = merged_data['positive'].shift(1)
merged_data['negative_lag1'] = merged_data['negative'].shift(1)
merged_data['neutral_lag1'] = merged_data['neutral'].shift(1)

merged_data['positive_lag2'] = merged_data['positive'].shift(2)
merged_data['negative_lag2'] = merged_data['negative'].shift(2)
merged_data['neutral_lag2'] = merged_data['neutral'].shift(2)

# –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ (NaN)
merged_data = merged_data.dropna()

# ---------- 7. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è ----------
for ticker in open_data.columns[1:]:
    print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –¥–ª—è {ticker}:")

    y = merged_data[ticker]  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (—Ü–µ–Ω–∞ Open)

    X = merged_data[['positive_lag1', 'negative_lag1', 'neutral_lag1', 
                     'positive_lag2', 'negative_lag2', 'neutral_lag2']]  # –ü—Ä–∏–∑–Ω–∞–∫–∏

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    model = LinearRegression()
    model.fit(X, y)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    y_pred = model.predict(X)

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤
    r2 = r2_score(y, y_pred)
    print(f"R¬≤ = {r2:.3f}")

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
    coef_df = pd.DataFrame({
        'Feature': X.columns,
        'Coefficient': model.coef_
    })
    print(coef_df)

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –†–µ–∞–ª—å–Ω–∞—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
    plt.figure(figsize=(10, 5))
    plt.plot(merged_data['published_date'], y, label='Real Open', color='blue')
    plt.plot(merged_data['published_date'], y_pred, label='Predicted open', color='red', linestyle='--')
    plt.title(f"{ticker} - –†–µ–∞–ª—å–Ω–∞—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è")
    plt.xlabel('Date')
    plt.ylabel('Open')
    plt.legend()
    plt.show()
